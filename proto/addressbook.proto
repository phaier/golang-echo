// https://qiita.com/kitauji/items/fdbd052c19dad28ab067
// Protocol Buffers のバージョンを指定する。省略すると proto2 と見なされる。
syntax = "proto3";

// package は、プロジェクト間での名前衝突を防ぐためのパッケージ名。
// このパッケージ名は各言語に応じた解釈が行われる。
// (例)
//   C++    : C++の名前空間になる
//   C#     : パスカル形式に変換後にC#の名前空間になる(csharp_namespaceの指定が無い場合)
//   Go     : Goのパッケージ名になる(go_packageの指定が無い場合)
//   Python : 無視される
package addresspb;

// 他の *.proto ファイルの定義された型などを読み込みたい場合は import を使う
// 以下の "google/..." は、protoc に含まれる include ディレクトリ配下を指している。
import "google/protobuf/timestamp.proto";

// option は、特定のコンテキストで解釈される。すべてのリストは以下のファイルに記載されてる。
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/descriptor.proto
//
// go_package は生成される *.pb.go ファイルのパッケージを指定する。
// 無くてもコンパイルできるが警告が出る。
// なお、セミコロンを付けてパッケージのインポートパスとパッケージ名を別々に指定することも可能。
// 
// (例)
//   option go_package = "github.com/hoge/fuga";         // セミコロン無し
//   option go_package = "github.com/hoge/fuga;fuga";    // セミコロンあり
option go_package = ".;addresspb";

// メッセージ(Person)の定義
message Person {
    // メッセージのフィールド。
    // 各フィールドの識別子として 1, 2... というフィールド番号(タグ)が必要。
    // → シリアライズされたデータでは、フィールド番号でフィールドを識別するため。
    string name = 1;
    int32 id = 2;
    string email = 3;

    // 列挙型の定義
    enum PhoneType {
        MOBILE = 0;
        HOME = 1;
        WORK = 2;
    }

    // メッセージの中に別のメッセージの定義を含められる(定義のネスト)
    message PhoneNumber {
        string number = 1;
        PhoneType type = 2;
    }

    // repeatedは配列(要素の数は任意。0個でもよい。)
    repeated PhoneNumber phones = 4;

    // Import した *.proto ファイルで定義された型
    google.protobuf.Timestamp last_updated = 5;
}

// メッセージ(AddressBook)の定義
// AddressBook は複数の Person を含む。
message AddressBook {
    repeated Person people = 1;
}
